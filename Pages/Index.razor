@page "/"
@using ChineseYuanParser.Data

@inject IJSRuntime JavaScriptRuntime

<div class="main box mt-4">
    <h1 class="text-center">
        大写人民币翻译机
    </h1>
    <div class="text-center">
        <small>Blazor WASM By .Net @Environment.Version</small>
    </div>

    <hr />

    <div class="row">

        <!-- 左侧功能区 -->
        <div class="col-md-8">

            <!-- 展示及动作 -->
            <section>

                <!-- 转换结果展示 -->
                <div class="cap-result border bg-light mb-2 p-3">
                    <h3>
                        @ParseResult
                    </h3>
                </div>

                <!-- 数字金额输入框 -->
                <div class="row">
                    <div class="col-md-8" style="margin-bottom: 10px;">
                        <input type="text" class="form-control" placeholder="请输入数字金额" @bind-value="DigitalAmount" @bind-value:event="oninput" />
                    </div>
                    <div class="col-md-4" style="margin-bottom: 10px;">
                        <div class="row">
                            <button class="col-md-3 btn btn-success myButton" @onclick="CopyResult" >复制</button>
                            <button class="col-md-3 btn btn-primary myButton" @onclick="ReadResult" >朗读</button>
                            <button class="col-md-3 btn btn-danger myButton" @onclick="ClearResult" >清除</button>
                        </div>
                    </div>
                </div>

            </section>

            <!-- 快捷键 -->
            <section>

                <!-- 快捷键1-9 -->
                <div class="row">
                    @for (var i = 1; i <= 9; i++)
                    {
                        var num = i;
                        <div class="col-4">
                            <button class="btn btn-light border key" @onclick="() => ShortCutInvoked(num.ToString())">@num</button>
                        </div>
                    }
                </div>

                <!-- 快捷键0和. -->
                <div class="row">
                    <div class="col-8">
                        <button class="btn btn-light border key" @onclick='() => ShortCutInvoked("0")'>0</button>
                    </div>
                    <div class="col-4">
                        <button class="btn btn-light border key" @onclick='() => ShortCutInvoked(".")'>.</button>
                    </div>
                </div>

            </section>
        </div>

        <!-- 右侧参照表 -->
        <div class="col-md-4">

            <div class="card">
                <div class="card-header">
                    参照表
                </div>

                <div class="card-body">

                    <!-- 快捷键1-9 -->
                    <div class="row">
                        @foreach (var item in ReferList)
                        {
                            <div class="col-4">
                                <button class="btn btn-light border refer">
                                    <div class="text-bottom">
                                        @item.Key<small>(@item.Value)</small>
                                    </div>
                                </button>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="mt-3 text-center author">
    <a href="https://www.cnblogs.com/taylorshi" target="_blank">Taylor Shi</a>
</div>

@code{

    /// <summary>
    /// 参照列表
    /// </summary>
    /// <value></value>
    public Dictionary<string, string> ReferList { get; set; } = new Dictionary<string, string>
    {
        {
            "零","0"
        },
        {
            "壹","1"
        },
        {
            "贰","2"
        },
        {
            "叁","3"
        },
        {
            "肆","4"
        },
        {
            "伍","5"
        },
        {
            "陆","6"
        },
        {
            "柒","7"
        },
        {
            "捌","8"
        },
        {
            "玖","9"
        },
        {
            "拾","10"
        },
        {
            "佰","百"
        },
        {
            "仟","千"
        },
        {
            "万","万"
        },
        {
            "亿","亿"
        },
    };

    /// <summary>
    /// 数字金额
    /// </summary>
    private string _digitalAmount;
    public string DigitalAmount 
    { 
        get => _digitalAmount; 
        set
        {
            _digitalAmount = value;

            // 输入值为空不做处理
            if(!string.IsNullOrEmpty(value) && !string.IsNullOrWhiteSpace(value))
            {
                // 最大值：99999999999.99
                if(!Equals(value, ".") && double.Parse(value) > 99999999999.99)
                {
                    return;
                }

                // 小数点后最多两位
                if(value.Contains("."))
                {
                    // 如果只有一个点，特殊处理成0.
                    if(!Equals(value, "."))
                    {
                        // 按.拆分，且只允许存在一个.
                        var spiltValues = value.Split('.');
                        if(spiltValues.Length != 2)
                        {
                            return;
                        }

                        // 小数部分长度不能超过2位
                        var decimalValue = spiltValues.LastOrDefault();
                        if(!string.IsNullOrEmpty(decimalValue) && decimalValue.Length > 2)
                        {
                            return;
                        }
                    }
                    else
                    {
                        value = "0.";
                        _digitalAmount = value;
                    }
                }

                // 将01234 格式化成1234
                if(value.StartsWith("0") && !value.Contains("."))
                {
                    var intValue = int.Parse(value);
                    value = intValue.ToString();
                    _digitalAmount = value;
                }

                // 转换
                ParseResult = RMBConverter.RMBToCap(_digitalAmount);
            }
            else
            {
                ParseResult = string.Empty;
            }
        }
    }

    /// <summary>
    /// 解析结果
    /// </summary>
    /// <value></value>
    public string ParseResult { get; set; }

    /// <summary>
    /// 快捷键触发事件
    /// </summary>
    /// <param name="num"></param>
    private void ShortCutInvoked(string num)
    {
        DigitalAmount += num;
    }

    /// <summary>
    /// 复制结果
    /// </summary>
    private async Task CopyResult()
    {
        if (!string.IsNullOrEmpty(ParseResult))
        {
            await JavaScriptRuntime.InvokeVoidAsync("clipboardCopy.copyText", ParseResult);
        }
    }

    /// <summary>
    /// 朗读结果
    /// </summary>
    private async Task ReadResult()
    {
        if (!string.IsNullOrEmpty(ParseResult))
        {
            await JavaScriptRuntime.InvokeVoidAsync("readAloud.readText", ParseResult);
        }
    }

    /// <summary>
    /// 清除结果
    /// </summary>
    private void ClearResult()
    {
        DigitalAmount = string.Empty;
    }
}
